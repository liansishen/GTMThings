mixin {
//    add sourceSets.main, "${mod_id}.refmap.json"
//    config "${mod_id}.mixins.json"
}

legacyForge {
    version = "${minecraft_version}-${forge_version}"

    parchment {
        minecraftVersion = parchment_minecraft_version
        mappingsVersion = parchment_mappings_version
    }

    runs {
        client {
            client()
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
            programArguments.addAll('--width', '3200')
            programArguments.addAll('--height', '1800')
        }

        server {
            server()
            programArgument '--nogui'
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        data {
            data()
            ideName = "Data"
            gameDirectory.set(file('run/data'))
            programArguments.addAll('--mod', project.mod_id)
            programArguments.addAll('--all')
            programArguments.addAll('--output', file('src/generated/resources/').getAbsolutePath())
            programArguments.addAll('--existing', file('src/main/resources/').getAbsolutePath())
        }

        configureEach {
            systemProperty 'forge.logging.markers', 'REGISTRIES'
            logLevel = org.slf4j.event.Level.INFO
        }
    }

    mods {
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }

    accessTransformers = project.files('src/main/resources/META-INF/accesstransformer.cfg')
}
